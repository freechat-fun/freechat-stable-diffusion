{{- if .Values.deployment.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helpers.fullname" . }}
  labels:
    {{- include "helpers.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helpers.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helpers.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helpers.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: main
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            {{- if and .Values.deployment.gpu.enabled (or (eq .Values.deployment.gpu.type "nvidia") (not .Values.deployment.gpu.type))}}
            - name: PATH
              value: /usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            {{- end}}
            {{- with .Values.extraEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          args:
          {{- with .Values.extraArgs }}
             {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- $limits := default dict .Values.resources.limits }}
            {{- if .Values.deployment.gpu.enabled }}
          # If gpu is enabled, it can either be a NVIDIA card or a AMD card
              {{- if or (eq .Values.deployment.gpu.type "nvidia") (not .Values.deployment.gpu.type) }}
          # NVIDIA is assumed by default if no value is set and GPU is enabled
          # NVIDIA cards can have mig enabled (i.e., the card is sliced into parts
          # Therefore, the first case is no migs enabled
                {{- if or (not .Values.deployment.gpu.mig) (not .Values.deployment.gpu.mig.enabled ) }}
                  {{- $gpuLimit := dict (.Values.deployment.gpu.nvidiaResource | default "nvidia.com/gpu") (.Values.deployment.gpu.number | default 1) }}
                  {{- $limits = merge $limits $gpuLimit }}
          # Second case is mig is enabled
                {{- else if or (.Values.deployment.gpu.mig.enabled) }}
          # Initialize empty dictionary
                  {{- $migDevices := dict -}}
          # Loop over the entries in the mig devices
                  {{- range $key, $value := .Values.deployment.gpu.mig.devices }}
                    {{- $migKey := printf "nvidia.com/mig-%s" $key -}}
                    {{- $migDevices = merge $migDevices (dict $migKey $value) -}}
                  {{- end }}
                  {{- $limits = merge $limits $migDevices}}
                {{- end }}
              {{- end }}
              {{- if eq .Values.deployment.gpu.type "amd" }}
                {{- $gpuLimit := dict "amd.com/gpu" (.Values.deployment.gpu.number | default 1) }}
                {{- $limits = merge $limits $gpuLimit }}
              {{- end }}
            {{- end }}
            {{- $ressources := deepCopy (dict "limits" $limits) | mergeOverwrite .Values.resources }}
            {{- toYaml $ressources | nindent 12 }}
          {{- end}}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /cert
              name: cert
      volumes:
        - name: config
          configMap:
            name: trojan-config
        - name: cert
          secret:
            secretName: {{ include "helpers.name" . }}-tls
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.deployment.gpu.enabled .Values.tolerations }}
      tolerations:
        {{- if and .Values.deployment.gpu.enabled (and 
              ( or (eq .Values.deployment.gpu.type "nvidia") (not .Values.deployment.gpu.type)) 
              ( or (not .Values.deployment.gpu.mig) (not .Values.deployment.gpu.mig.enabled))
            ) }}
        - key: '{{ (.Values.deployment.gpu.nvidiaResource | default "nvidia.com/gpu") }}'
          operator: Exists
          effect: NoSchedule
          {{- else if and .Values.deployment.gpu.enabled (and 
              ( or (eq .Values.deployment.gpu.type "nvidia") (not .Values.deployment.gpu.type)) 
              (( .Values.deployment.gpu.mig.enabled))
            ) }}
            {{- range $key, $value := .Values.deployment.gpu.mig.devices }}
        - key: nvidia.com/mig-{{ $key }}
          operator: Exists
          effect: NoSchedule
            {{- end }}
        {{- end }}
        {{- with .Values.tolerations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
{{- end }}
